import { PrismaClient } from '@prisma/client'
import process from 'process'
import dotenv from 'dotenv'

if (process.env.ENVIRONMENT === "DEVELOPMENT") {
	dotenv.config({ path: ".env.development" })
} else {
	dotenv.config({ path: ".env.production" })
}

const prisma = new PrismaClient()
async function main() {

  // 인증 정보 초기 설정
  const userList = [
    ['name', 'email@a.com', 0],
  ]; 

  await Promise.all(userList.map(async (user) => { // await Promise.all 하면 삽입 다 하고 연결 끊김! (순서 섞임)
    const newUser = await prisma.verify.upsert({
      where: { Email: user[1] },
      update: {},
      create: {
        Email: user[1],
        Name: user[0],
        Class: user[2],
      },
    })
  }))

  
}
main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    console.error(e)
    await prisma.$disconnect()
    process.exit(1)
  })

// 질문 정보
const questionList = [
  ['', 1] // 1 : 질문 카테고리
]

await Promise.all(questionList.map(async (question) => { // await Promise.all 하면 삽입 다 하고 연결 끊김! (순서 섞임)
  const newQuestion1 = await prisma.question.upsert({
    where: {},
    update: {},
    create: {
      Contents: question[0],
      ThemeId: question[1],
      Class: 1,
    },
  })
  const newQuestion2 = await prisma.question.upsert({
    where: {},
    update: {},
    create: {
      Contents: question[0],
      ThemeId: question[1],
      Class: 2,
    },
  })
  const newQuestion3 = await prisma.question.upsert({
    where: {},
    update: {},
    create: {
      Contents: question[0],
      ThemeId: question[1],
      Class: 3,
    },
  })
  const newQuestion4 = await prisma.question.upsert({
    where: {},
    update: {},
    create: {
      Contents: question[0],
      ThemeId: question[1],
      Class: 4,
    },
  })
}))
